{"version":3,"sources":["webpack:///webpack:///src/src/styles/about-page.css","webpack:///webpack:///src/src/styles/components/_jumbotron.scss","webpack:///webpack:///src/src/styles/helpers/_mixins.scss","webpack:///webpack:///src/src/styles/components/_footer.scss","webpack:///webpack:///src/src/styles/components/_about.scss","webpack:///webpack:///src/src/styles/components/_header.scss","webpack:///webpack:///src/src/styles/main.scss","webpack:///webpack:///src/src/styles/helpers/_variables.scss","webpack:///webpack:///src/src/styles/helpers/_grid.scss"],"names":[],"mappings":"AAAA,YACE,WAAa,CCGf,eACE,mBAEA,sDACA,sBACA,4BACA,uBAAmC,CANrC,kBASI,aAAe,CAChB,YAMD,yBACA,YAAc,CAFhB,0BAKI,cAEA,cACA,cACA,WAEA,eAAiB,CAElB,YAKD,gBAEA,aAAe,CAHjB,qCC/BQ,WACA,aAAe,CAClB,kBAEG,UAAY,CACf,eDoCD,qDACA,sBACA,4BACA,wBAEA,WACA,qBAEA,aACA,YACA,eACA,gBAAkB,CArBtB,iBA2BI,cACA,YACA,cACA,aAAe,CAChB,+BAMG,aAAe,CAChB,OExEH,cACA,yBACA,cACA,iBAAmB,CALrB,iBACE,aACA,CAOC,eCRD,oBAAsB,CADxB,kBAII,aAAe,CAChB,OCJD,eAAiB,CCMnB,iBAGE,SACA,UACA,qBAAuB,CACxB,IAGC,WACA,eACA,WAAa,CACd,KAGC,WACA,+BACA,wBCbqB,CDctB,WAGC,iBACA,aAAe,CAChB,MAGC,yBACA,YAAc,CACf,iBAMC,mBAAqB,CACtB,oBAGC,eAAiB,CAClB,mBAGC,kBAAoB,CACrB,cAKC,gBAEA,aAAe,CAHjB,yCJjDQ,WACA,aAAe,CIgDvB,oBJ7CQ,UAAY,CI6CpB,iBAWI,WACA,qBACA,YACA,eACA,gBAAkB,CAftB,qBAqBI,cACA,aAAe,CAChB,0DAID,iCAGI,aAAe,CAChB,CAIL,0DAGE,iBAGI,eE7BY,CF0BhB,iCAOI,aAAe,CAChB,CAIL,2DAGE,iBAGI,YE7CY,CF0ChB,iCAOI,aAAe,CAChB,CAIL,qCAGE,iBAGI,eE7DY,CF0DhB,iCAOI,aAAe,CAChB","file":"styles.css","sourcesContent":[".alt-header {\n  color: green;\n}\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/styles/about-page.css\n **/","// jumbotron styling\n\n\n// jumbo text content\n.jumbo-content {\n  padding: 10rem 1rem;\n\n  background-image: url(\"https://placehold.it/1200x675\"); \n  background-size: cover;\n  background-repeat:no-repeat;\n  background-position: center center;\n\n  h1 {\n    font-size: 3em;\n  }\n}\n\n\n// MAIN SEARCH INPUT\n.search-bar {\n  background-color: main-color('primary');\n  padding: 1rem;\n\n  .search-input {\n    font-size: 1em;\n\n    display: block;\n    margin: 0 auto;\n    width: 100%;\n    // height: 2em;\n    max-width: 600px;\n\n  }\n}\n\n\n.jumbo-list {\n  list-style: none;\n\n  margin: 0 auto;\n  // padding: 1em;\n\n  @include clearfix;\n\n  // grid layout for jumbo options\n  li {\n    background-image: url(\"https://placehold.it/600x338\"); \n    background-size: cover;\n    background-repeat:no-repeat;\n    background-position: center center;\n\n    float: left;\n    display: inline-block;\n\n    height: 310px;\n    width: grid-width('col-6', 1);\n    margin-left: 1%;\n    margin-bottom: 1%;\n  }\n  \n\n  // center images\n  li a {\n    font-size: 2em;\n    height: 100%;\n    display: block;\n    margin: 0 auto;\n  }\n}\n\n.jumbo-list {\n    // ensuring first element of each row has no margin-left\n    li:nth-child(2n + 1) {\n      margin-left: 0;\n    }\n  }\n\n\n@media screen and (min-width: 200px) and (max-width: 549px) {\n  \n}\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/styles/components/_jumbotron.scss\n **/","\n// clearfix\n@mixin clearfix {\n    &:before,\n    &:after {\n        content: \"\";\n        display: table;\n    }\n    &:after {\n        clear: both;\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/styles/helpers/_mixins.scss\n **/","footer {\n  margin: 0 auto;\n  display: block;\n  background-color: main-color('background-dark');\n  color: main-color('light');\n  text-align: center;\n  \n  h2 {\n    margin: 0 auto;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/styles/components/_footer.scss\n **/",".about-section {\n  padding: 0 1rem 20rem;\n\n  h1 {\n    font-size: 2em;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/styles/components/_about.scss\n **/","header {\n  text-align: left;\n}\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/styles/components/_header.scss\n **/","// import helper sass files\n@import 'helpers/base';\n\n// import components\n@import 'components/base';\n\n// Global resets\n*,\n*:after,\n*:before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; \n}\n\nimg {\n  width: auto;\n  max-width: 100%;\n  height: auto;\n}\n\nbody {\n  width: 100%;\n  font-family: 'PT Sans', sans-serif;\n  background-color: main-color('background');\n}\n\n.container {\n  max-width: $max-width;\n  margin: 0 auto;\n}\n\n.main {\n  background-color: main-color('light');\n  padding: 1rem;\n}\n\n\n\n// generic sections\n.section-heading {\n  margin-bottom: .5rem;\n}\n\n.section-heading ul {\n  list-style: none;\n}\n\n.discovery-content {\n  margin-bottom: 1rem;\n}\n\n// generic LIST\n\n.generic-list {\n  list-style: none;\n\n  margin: 0 auto;\n  // padding: 1em;\n\n  @include clearfix;\n\n\n  // grid layout for images\n  li {\n    float: left;\n    display: inline-block;\n    width: grid-width('col-6', 1);\n    margin-left: 1%;\n    margin-bottom: 1%;\n  }\n  \n\n  // center images\n  li img {\n    display: block;\n    margin: 0 auto;\n  }\n}\n\n@media screen and (min-width: 200px) and (max-width: 549px) {\n  .generic-list {\n    // ensuring first element of each row has no margin-left\n    li:nth-child(2n + 1) {\n      margin-left: 0;\n    }\n  }\n}\n\n@media screen and (min-width: 550px) and (max-width: 799px) {\n  \n  // generic list grid\n  .generic-list {\n\n    li {\n      width: grid-width('col-4', 1);\n    }\n\n    li:nth-child(3n + 1) {\n      margin-left: 0;\n    }\n  }\n}\n\n@media screen and (min-width: 800px) and (max-width: 1099px){\n  \n  // generic list grid\n  .generic-list {\n\n    li {\n      width: grid-width('col-3', 1);\n    }\n\n    li:nth-child(4n + 1) {\n      margin-left: 0;\n    }\n  }\n}\n\n@media screen and (min-width: 1100px) {\n  \n  // generic list grid\n  .generic-list {\n\n    li {\n      width: grid-width('col-2', 1);\n    }\n\n    li:nth-child(6n + 1) {\n      margin-left: 0;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/styles/main.scss\n **/","// Example of defining a SET of clors\n// and retrieving it via function and sass's map-get function\n\n\n// aim for 4-7 colors\n$main-colors: (\n  'primary': #96C0B7, \n  'accent': #FEF6C9,\n  'secondary': #D4DFC7,\n  'foreground': #878E88,\n  'foreground-light': #E3F2E5,\n  'background': #F1F1F1,\n  'background-dark': #332424,\n  'light': #FFFEF7,\n);\n\n// // Given\n@function main-color($key: 'primary') {\n\t@return map-get($main-colors, $key);\n}\n\n\n// Max width\n$max-width: 1200px;\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/styles/helpers/_variables.scss\n **/","// This is a basic css 12-column grid layout\n\n/*\n  Calculating Column Widths\n\n  Calculation for a SINGLE column width\n  scw = (100 – (m * (mc – 1))) / mc\n    (100 - (1.6 * 11)) / 12\n    (100 - 17.6) / 12\n    82.4 / 12         // 82.4 is the total width of 11/12 columns MINUS margins\n    6.86666666667\n\n  (100 – (m * (mc – 1))) / mc\n  (100 - (1 * (12-1))) / 12\n\n  scw = single column width\n  m = margin gutters (1%)\n  mc = maximum columns (12)\n\n  (100 - (1 * (12-1))) / 12\n\n  Where:\n\n  scw = single column width\n  m = margin (1.6%)\n  mc = maximum columns (12)\n\n  Calculation for the REST of the column widths\n\n  cw = (scw * cs) + (m * (cs – 1))\n  \n  Where:\n\n  cw = column width\n  scw = single column width (6.86666666667%)\n  cs = column span (1-12)\n  m = margin (1.6%)\n  \n  2/12  == (6.86666666667 * 2) + (1.6 * (2 - 1)); width = 15.3333333333\n  3/12  == (6.86666666667 * 3) + (1.6 * (3 - 1)); width = 23.8\n  4/12  == (6.86666666667 * 4) + (1.6 * (4 - 1)); width = 32.2666666667\n  5/12  == (6.86666666667 * 5) + (1.6 * (5 - 1)); width = 40.7333333333\n  6/12  == (6.86666666667 * 6) + (1.6 * (6 - 1)); width = 49.2\n  7/12  == (6.86666666667 * 7) + (1.6 * (7 - 1)); width = 57.6666666667\n  8/12  == (6.86666666667 * 8) + (1.6 * (8 - 1)); width = 66.1333333333\n  9/12  == (6.86666666667 * 9) + (1.6 * (9 - 1)); width = 74.6\n  10/12 == (6.86666666667 * 10) + (1.6 * (10 - 1)); width = 83.0666666667\n  11/12 == (6.86666666667 * 11) + (1.6 * (11 - 1)); width = 91.5333333333\n  12/12 == (6.86666666667 * 12) + (1.6 * (12 - 1)); width = 100\n\n */\n\n// Column maps to the column length(out of 12) in the grid list\n// gutter is the gutter length( in %)\n@function grid-width($column, $gutter) {\n  \n  // (100 - (1 * (12-1))) / 12\n  // Replace 1 with gutter\n  // $col: 7.41666666667%;\n  $col-pre: (100 - ($gutter * (12 - $gutter))) / 12;\n  $col: $col-pre;\n\n  $grid: (\n    'col-1': $col,\n    'col-2': ($col * 2) + ($gutter * (2 - 1)) * 1%,\n    'col-3': ($col * 3) + ($gutter * (3 - 1)) * 1%,\n    'col-4': ($col * 4) + ($gutter * (4 - 1)) * 1%,\n    'col-5': ($col * 5) + ($gutter * (5 - 1)) * 1%,\n    'col-6': ($col * 6) + ($gutter * (6 - 1)) * 1%,\n    'col-7': ($col * 7) + ($gutter * (7 - 1)) * 1%,\n    'col-8': ($col * 8) + ($gutter * (8 - 1)) * 1%,\n    'col-9': ($col * 9) + ($gutter * (9 - 1)) * 1%,\n    'col-10': ($col * 10) + ($gutter * (10 - 1)) * 1%,\n    'col-11': ($col * 11) + ($gutter * (11 - 1)) * 1%,\n    'col-12': ($col * 12) + ($gutter * (12 - 1)) * 1%,\n  );\n\n  @return map-get($grid, $column);\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/styles/helpers/_grid.scss\n **/"],"sourceRoot":""}